theory RevolvingDoor_VC4
imports RevolvingDoorTheory
begin

lemma extra:
 assumes base_inv:"(extraInv st0)"
 and st1:"(st1=(setVarBool st0 ''pressure'' pressure))"
 and st2:"(st2=(setVarBool st1 ''user'' user))"
 and st2_Controller_state:"(getPstate st2 ''Controller'')=''rotating''"
 and st2_if4:"(getVarBool st2 ''pressure'')=True"
 and st3:"(st3=(setVarBool st2 ''rotation'' False))"
 and st4:"(st4=(setVarBool st3 ''brake'' True))"
 and st5:"(st5=(setPstate st4 ''Controller'' ''suspended''))"
 and st6:"(st6=(toEnv st5))"
 and st_final:"(st_final=st6)"
shows "(extraInv st_final)"
proof (simp only: extraInv_def;intro conjI)
  show "toEnvP st_final" using assms by auto
next
  show "extraControllerStates st_final"
  proof -
    have "extraControllerStates st0" using extraInv_def base_inv by blast
    then show ?thesis using assms extraControllerStates_def by auto
  qed
next
  show "extraMotionlessOut st_final" 
  proof -
    have "extraMotionlessOut st0" using extraInv_def base_inv by blast
    then show ?thesis using assms extraMotionlessOut_def by auto
  qed
next
  show "extraRotatingOut st_final" 
  proof -
    have "extraRotatingOut st0" using extraInv_def base_inv by blast
    then show ?thesis using assms extraRotatingOut_def by auto
  qed
next
  show "extraSuspendedOut st_final"
  proof (simp only:extraSuspendedOut_def;rule allI; rule impI)
    fix s1
    assume prems: "toEnvP s1 \<and>
          substate s1 st_final \<and>
          getPstate s1 ''Controller'' =
          ''suspended''"
    then show "\<not> getVarBool s1 ''rotation'' \<and>
          getVarBool s1 ''brake'' \<and>
          ltime s1 ''Controller'' \<le> 1000"
    proof (cases)
      assume 1:"s1=st_final"
      have 2:"\<not> getVarBool st_final ''rotation''" using assms by auto
      have 3:"getVarBool st_final ''brake''" using assms by auto
      have 4:"ltime st_final ''Controller'' \<le> 1000" using assms by auto
      show  ?thesis using 1 2 3 4 by auto
    next
      assume 1: "s1\<noteq>st_final"
      have "predEnv st_final = st0" using assms extraInv_def by auto
      then have 2:"substate s1 st0" using 1 assms prems substate_eq_or_predEnv by blast 
      have "extraSuspendedOut st0" using base_inv extraInv_def by auto
      thus ?thesis using 1 2 prems assms extraInv_def extraSuspendedOut_def[of st0] substate_refl by blast
    qed
  qed
next
  show "extra1 st_final"
  proof -
    have "extra1 st0" using base_inv extraInv_def by auto
    thus ?thesis using assms extra1_def by auto
  qed
next
  show "extra2 st_final"
  proof -
    have "extra2 st0" using base_inv extraInv_def by auto
    thus ?thesis using assms extra2_def by auto
  qed
next
  show "extra3 st_final"
  proof -
    have "extra3 st0" using base_inv extraInv_def by auto
    thus ?thesis using assms extra3_def by auto
  qed
next
  show "extra6 st_final"
  proof -
    have "extra6 st0" using base_inv extraInv_def by auto
    thus ?thesis using assms extra6_def by auto
  qed
next
  show "extra4 st_final"
  proof(simp only: extra4_def;rule allI;rule impI)
    fix s1
    assume prems:"toEnvP s1 \<and>
                  substate s1 st_final \<and>
                  getPstate s1 ''Controller'' = ''suspended''"
    then show 
      "(\<exists> s2 s3. 
      toEnvP s2 \<and> 
      toEnvP s3 \<and> 
      substate s2 s3 \<and> 
      substate s3 s1 \<and> 
      toEnvNum s2 s3 = 1 \<and>
      toEnvNum s2 s1 = ltime s1 ''Controller'' div 100 \<and>
      (getPstate s2 ''Controller'' \<noteq> ''motionless'' \<or> 
        getVarBool s3 ''user'') \<and> 
      getVarBool s3 ''pressure'')"
    proof (cases)
      assume 1:"s1=st_final"
      have "toEnvP st0 \<and> 
            toEnvP st_final" using  assms extraInv_def by auto
      moreover have "substate st0 st_final" using assms substate_refl by auto 
      moreover have "substate st_final s1" using 1 substate_refl by auto
      moreover have "toEnvNum st0 st_final =1" using assms toEnvNum_id by auto
      moreover have "toEnvNum st0 s1 = ltime s1 ''Controller'' div 100" using 1 assms toEnvNum_id by auto
      moreover have "getPstate st0 ''Controller'' \<noteq> ''motionless''" using assms by auto
      moreover have "getVarBool st_final ''pressure''" using assms by auto
      ultimately show ?thesis by auto
    next
      assume 1:"s1\<noteq>st_final"
      have "predEnv st_final = st0" using assms extraInv_def by auto
      then have 2:"substate s1 st0" using 1 assms prems substate_eq_or_predEnv by blast
      have "extra4 st0" using assms extraInv_def by auto
      then show ?thesis using 1 2 prems assms extraInv_def extra4_def by auto
    qed
  qed
next
  show "extra5 st_final" 
  proof(simp only: extra5_def;rule allI;rule impI)
    fix s1
    assume prems:"toEnvP s1 \<and>
          substate s1 st_final \<and>
          getPstate s1 ''Controller''=''suspended''"
    then show "\<exists>s2 s3.
             toEnvP s2 \<and>
             toEnvP s3 \<and>
             substate s2 s3 \<and>
             substate s3 s1 \<and>
             toEnvNum s2 s3 = 1 \<and>
             (getPstate s2 ''Controller'' = ''motionless'' \<and> getVarBool s3 ''user'' \<or>
              getPstate s2 ''Controller'' = ''rotating'') \<and>
             getVarBool s3 ''pressure'' \<and>
             (\<forall>s4. toEnvP s4 \<and> substate s3 s4 \<and> substate s4 s1 \<longrightarrow>
                   getPstate s4 ''Controller'' = ''suspended'')"
    proof (cases)
      assume 1:"s1=st_final"
      have "toEnvP st0 \<and> 
            toEnvP st_final" using  assms extraInv_def by auto
      moreover have "substate st0 st_final" using assms substate_refl by auto 
      moreover have "substate st_final s1" using 1 substate_refl by auto
      moreover have "toEnvNum st0 st_final =1" using assms toEnvNum_id by auto
      moreover have "getPstate st0 ''Controller'' = ''rotating''" using assms by auto
      moreover have "getVarBool st_final ''pressure''" using assms by auto
      moreover have "(\<forall>s4. toEnvP s4 \<and> substate st_final s4 \<and> substate s4 s1 \<longrightarrow>getPstate s4 ''Controller'' = ''suspended'')" using assms 1 substate_asym prems by blast
      ultimately show ?thesis by auto
    next
      assume 1:"s1\<noteq>st_final"
      have "predEnv st_final = st0" using assms extraInv_def by auto
      then have 2:"substate s1 st0" using 1 assms prems substate_eq_or_predEnv by blast
      have "extra5 st0" using assms extraInv_def by auto
      then show ?thesis using 1 2 prems assms extraInv_def extra5_def by auto
    qed
  qed
next
  show "extra7 st_final"
  proof (simp only: extra7_def; intro allI; rule impI)
    fix s1 s2 s3
    assume prems:
      "toEnvP s1 \<and> 
  toEnvP s2 \<and> 
  toEnvP s3 \<and> 
  substate s1 s2 \<and> 
  substate s2 s3 \<and> 
  substate s3 st_final \<and>
  toEnvNum s1 s2 = 1 \<and> 
  toEnvNum s1 s3 < ltime s3 ''Controller'' div 100 \<and> 
  getPstate s3 ''Controller'' = ''suspended''"
    then show "getPstate s1 ''Controller'' = ''suspended'' \<and> 
              \<not> getVarBool s2 ''pressure''"
    proof (cases)
      assume 1:"s3=st_final"
      then have "ltime s3 ''Controller'' div 100 = 1" using assms by auto
      then have "toEnvNum s1 s3 =0" using prems by auto
      moreover have "toEnvNum s1 s3 \<ge>1" using prems toEnvNum3 by auto
      ultimately show ?thesis by auto
    next
      assume 1:"s3\<noteq>st_final"
      have "predEnv st_final = st0" using assms extraInv_def by auto
      then have 2:"substate s3 st0" using 1 prems assms extraInv_def substate_eq_or_predEnv by blast
      then show ?thesis using assms prems extraInv_def extra7_def by auto
    qed
  qed
qed

lemma
 assumes base_inv:"(inv1 st0)"
 and st1:"(st1=(setVarBool st0 ''pressure'' pressure))"
 and st2:"(st2=(setVarBool st1 ''user'' user))"
 and st2_Controller_state:"(getPstate st2 ''Controller'')=''rotating''"
 and st2_if4:"(getVarBool st2 ''pressure'')=True"
 and st3:"(st3=(setVarBool st2 ''rotation'' False))"
 and st4:"(st4=(setVarBool st3 ''brake'' True))"
 and st5:"(st5=(setPstate st4 ''Controller'' ''suspended''))"
 and st6:"(st6=(toEnv st5))"
 and st_final:"(st_final=st6)"
shows "(inv1 st_final)"
proof(simp only: inv1_def; rule conjI)
  show "extraInv st_final" using assms extra inv1_def by auto
next
  show "R1 st_final"
  proof(simp only: R1_def; rule conjI)
    show "toEnvP st_final" using assms by auto
  next
    show "R1_sub1 st_final"
    proof -
       define inv1_Q1 where "inv1_Q1 = inv1_Q2 st_final"
        have "toEnvP st0 \<and> toEnvP st_final \<and> st0=predEnv st_final" using assms inv1_def extraInv_def  by auto
        moreover have "P2 inv1_Q2 st0" using assms P2_inv1_Q2_st0 by auto
        moreover have "inv1_Q1 st_final" 
        proof (simp only : inv1_Q1_def inv1_Q2_def;intro impI)
          assume "toEnvNum st_final st_final = 1 \<and>
                  \<not> getVarBool st_final ''rotation'' \<and>
                  getVarBool st_final ''user'' \<and> 
                  \<not> getVarBool st_final ''pressure''"
          then show "getVarBool st_final ''rotation''" by (simp add: toEnvNum_id)
        qed
        moreover have "P1 inv1_Q1 st0"
          apply (simp only:P1_def inv1_Q1_def inv1_Q2_def;rule allI)
          by (simp add: st2_if4 st3 st4 st5 st6 st_final)
        ultimately have "P2 inv1_Q2 st_final" using inv1_Q1_def two_pos_cond_exp by auto
        thus ?thesis using assms P2_inv1_Q2_eq_R1 R1_def by auto
      qed
    qed
  qed

  find_theorems "(_\<longrightarrow>_\<longrightarrow>_)"

lemma
 assumes base_inv:"(inv2 st0)"
 and st1:"(st1=(setVarBool st0 ''pressure'' pressure))"
 and st2:"(st2=(setVarBool st1 ''user'' user))"
 and st2_Controller_state:"(getPstate st2 ''Controller'')=''rotating''"
 and st2_if4:"(getVarBool st2 ''pressure'')=True"
 and st3:"(st3=(setVarBool st2 ''rotation'' False))"
 and st4:"(st4=(setVarBool st3 ''brake'' True))"
 and st5:"(st5=(setPstate st4 ''Controller'' ''suspended''))"
 and st6:"(st6=(toEnv st5))"
 and st_final:"(st_final=st6)"
shows "(inv2 st_final)"
proof(simp only: inv2_def; rule conjI)
  show "extraInv st_final" using assms extra inv2_def by auto
next
  show "R2 st_final"
  proof(simp only: R2_def; rule conjI)
    show "toEnvP st_final" using assms by auto
  next
    show "R2_sub1 st_final"
    proof -
       define inv2_Q1 where "inv2_Q1 = inv2_Q2 st_final"
        have "toEnvP st0 \<and> toEnvP st_final \<and> st0=predEnv st_final" using assms inv2_def extraInv_def  by auto
        moreover have "P2 inv2_Q2 st0" using assms P2_inv2_Q2_st0 by auto
        moreover have "inv2_Q1 st_final" 
        proof (simp only : inv2_Q1_def inv2_Q2_def;intro impI)
          assume "toEnvNum st_final st_final = 1 \<and>
                  getVarBool st_final ''rotation'' \<and>
                  getVarBool st_final ''user'' \<and> 
                  \<not> getVarBool st_final ''pressure''"
          then show "getVarBool st_final ''rotation''" by (simp add: toEnvNum_id)
        qed
        moreover have "P1 inv2_Q1 st0" 
          apply (simp only:P1_def inv2_Q1_def inv2_Q2_def;rule allI)
          by (simp add: st2_if4 st3 st4 st5 st6 st_final)
        ultimately have "P2 inv2_Q2 st_final" using inv2_Q1_def two_pos_cond_exp by auto
        thus ?thesis using assms P2_inv2_Q2_eq_R2 R2_def by auto
    qed
  qed
qed

lemma
 assumes base_inv:"(inv st0)"
 and st1:"(st1=(setVarBool st0 ''pressure'' pressure))"
 and st2:"(st2=(setVarBool st1 ''user'' user))"
 and st2_Controller_state:"(getPstate st2 ''Controller'')=''rotating''"
 and st2_if4:"(getVarBool st2 ''pressure'')=True"
 and st3:"(st3=(setVarBool st2 ''rotation'' False))"
 and st4:"(st4=(setVarBool st3 ''brake'' True))"
 and st5:"(st5=(setPstate st4 ''Controller'' ''suspended''))"
 and st6:"(st6=(toEnv st5))"
 and st_final:"(st_final=st6)"
shows "(inv st_final)"
end
